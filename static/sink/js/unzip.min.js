zip.useWebWorkers=!1;var obj=this,zipModel=function(){var e,n,t,o,i=obj.webkitURL||obj.mozURL||obj.URL;return{setCreationMethod:function(e){o=e},addFiles:function(i,r,a,l,c){var u=0;function f(){var e=i[u];a(e),n.add(e.name,new zip.BlobReader(e),function(){++u<i.length?f():c()},l)}function b(){zip.createWriter(t,function(e){n=e,r(),f()},onerror)}n?f():"Blob"==o?(t=new zip.BlobWriter,b()):createTempFile(function(n){e=n,t=new zip.FileWriter(e),b()})},getBlobURL:function(t){n.close(function(r){var a="Blob"==o?i.createObjectURL(r):e.toURL();t(a,r),n=null})},getBlob:function(e){n.close(e)}}}(),model=function(e){var n=e.webkitURL||e.mozURL||e.URL;return{getEntries:function(e,n,t){zip.createReader(new zip.HttpReader(e),function(e){e.getEntries(n)},function(e,n,o){t(e,n,o)})},getEntryFile:function(e,t,o){var i;i=new zip.BlobWriter,e.getData(i,function(e){var o=n.createObjectURL(e);t(o,e)},o)},getEntryBlob:function(e,n,t){var o;o=new zip.BlobWriter,e.getData(o,function(e){n(e)},t)}}}(this);function downloadBlob(e){var n={value:0,max:0};return new Promise(function(t,o){model.getEntryBlob(e,function(e){n.value=0,n.max=0,t(e)},function(e,t){n.value=e,n.max=t})})}function download(e,n){var t={value:0,max:0};return new Promise(function(o,i){model.getEntryFile(e,function(i,r){t.value=0,t.max=0,navigator.msSaveOrOpenBlob?navigator.msSaveOrOpenBlob(r,e.filename):(n.href=i,n.download=e.filename),o(n)},function(e,n){t.value=e,t.max=n})})}function zipBlob(e,n,t){zip.createWriter(new zip.BlobWriter("application/zip"),function(o){o.add(e,new zip.BlobReader(n),function(){o.close(t)})},onerror)}